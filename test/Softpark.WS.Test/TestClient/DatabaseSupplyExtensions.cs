// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Softpark.WS.Test
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for DatabaseSupply.
    /// </summary>
    public static partial class DatabaseSupplyExtensions
    {
            /// <summary>
            /// Endpoint para download de dados básicos para carga de trabalho
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelo'>
            /// O nome da view model que deseja consultar.
            /// </param>
            public static IList<BasicViewModel> GetEntities(this IDatabaseSupply operations, string modelo)
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetEntitiesAsync(modelo), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint para download de dados básicos para carga de trabalho
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelo'>
            /// O nome da view model que deseja consultar.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicViewModel>> GetEntitiesAsync(this IDatabaseSupply operations, string modelo, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetEntitiesWithHttpMessagesAsync(modelo, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Endpoint para download de dados dos profissionais
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ProfissionalViewModel> GetProfissionais(this IDatabaseSupply operations)
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetProfissionaisAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint para download de dados dos profissionais
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ProfissionalViewModel>> GetProfissionaisAsync(this IDatabaseSupply operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetProfissionaisWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Endpoint para listar os modelos de dados consultáveis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<BasicViewModel> GetModels(this IDatabaseSupply operations)
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetModelsAsync(), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Endpoint para listar os modelos de dados consultáveis
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<BasicViewModel>> GetModelsAsync(this IDatabaseSupply operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelsWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Buscar pacientes atendidos pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            public static IList<GetCadastroIndividualViewModel> GetPacientes(this IDatabaseSupply operations, Guid token, string microarea = default(string))
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetPacientesAsync(token, microarea), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Buscar pacientes atendidos pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetCadastroIndividualViewModel>> GetPacientesAsync(this IDatabaseSupply operations, Guid token, string microarea = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetPacientesWithHttpMessagesAsync(token, microarea, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Buscar domicílios atendidos pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            public static IList<GetCadastroDomiciliarViewModel> GetDomicilios(this IDatabaseSupply operations, Guid token, string microarea = default(string))
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetDomiciliosAsync(token, microarea), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Buscar domicílios atendidos pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<GetCadastroDomiciliarViewModel>> GetDomiciliosAsync(this IDatabaseSupply operations, Guid token, string microarea = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDomiciliosWithHttpMessagesAsync(token, microarea, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Buscar visitas realizadas pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            public static IList<FichaVisitaDomiciliarChildCadastroViewModel> GetVisitas(this IDatabaseSupply operations, Guid token, string microarea = default(string))
            {
                return Task.Factory.StartNew(s => ((IDatabaseSupply)s).GetVisitasAsync(token, microarea), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Buscar visitas realizadas pelo profissional informado
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='token'>
            /// Token de acesso
            /// </param>
            /// <param name='microarea'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<FichaVisitaDomiciliarChildCadastroViewModel>> GetVisitasAsync(this IDatabaseSupply operations, Guid token, string microarea = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVisitasWithHttpMessagesAsync(token, microarea, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
